@page "/ReviewBillPostPay"
@inject NavigationManager NavigationManager

<div id="main-container" style="display: grid">
    <div id="title-container" style="display: flex; justify-content:center; margin-bottom: 20px;">
        <h3 style="margin-top: 20px; border-bottom: 2px solid black;">Your Bill</h3>
    </div>

    <MudDivider></MudDivider>
    <div class="OrderedItemsWrapper" hidden="@itemsOrdered">
        @foreach (var item in orderedItems)
        {
            <div class="orderedItem" style="display: flex; justify-content: space-between; padding: 20px 10px;">
                <div id="orderedItem-group1" style="display: flex; margin-left: 20px;">
                    <div id="orderedItem-count" style="display: flex; align-items: center;  margin-right: 10px; padding:5px; border: 2px solid black;">@item.quantity</div>
                    <div style="inline-flex">
                        <div id="orderedItem-name" style="display: flex; align-items: center;">@item.name</div>
                        <div id="orderedItem-customizations" style="display: flex; align-items: center;">@item.customizations</div>
                    </div>
                </div>
                <div id="orderedItem-group2" style="display: flex; align-items: center;">
                    <div id="orderedItem-cost" style="margin-right: 20px; ">$ @item.price</div>
                </div>

            </div>

        }
    </div>
    <div hidden="@noitemsOrdered" style="text-align: center; color:darkred">No items have been ordered yet!</div>
    <MudDivider></MudDivider>

    <div id="cost-calculation-holder" style="display:flex; justify-content:end;">
        <div id="cost-calculation" style="padding: 20px;">
            <div id="tax" style="text-align:end; padding-bottom: 5px">Tax: $ @tax</div>
            <div id="Total-cost" style="font-weight: 600; font-size: larger; padding-top: 5px">Total: $ @totalPrice</div>
        </div>
    </div>


</div>



@code {
    private void NavigateToBillRequested()
    {
        NavigationManager.NavigateTo("/BillRequested");
    }

    static bool itemsOrdered = false;
    bool noitemsOrdered = !itemsOrdered;
    double totalPrice;
    double tax = 0;
    double taxPercentage = 0.05;

    public class MenuItem
    {
        public String name;
        public String price;
        public String quantity;
        public String customizations;

        public MenuItem(String name, String price, String quantity, String customizations)
        {
            this.name = name;
            this.price = price;
            this.quantity = quantity;
            this.customizations = customizations;
        }
    }

    List<MenuItem> orderedItems = new List<MenuItem>();
    protected override void OnInitialized()
    {
        if (NavigationManager.Uri.Contains("?"))
        {
            itemsOrdered = false;
            noitemsOrdered = !itemsOrdered;

            String CartInfo = NavigationManager.Uri.Split("?")[1];
            String[] items = CartInfo.Split("$");
            orderedItems = new List<MenuItem>();
            totalPrice = 0;
            tax = 0;

            foreach (var item in items)
            {
                String itemName = "";
                String itemPrice = "";
                String itemQuantity = "";
                String itemCustomizations = "";
                String[] itemDescriptions = item.Split("@");

                for (int i = 0; i < itemDescriptions.Length; i++)
                {
                    if (i == 0)
                    {
                        itemName = itemDescriptions[i];
                    }
                    else if (i == 1)
                    {
                        itemPrice = itemDescriptions[i];

                    }
                    else if (i == 2)
                    {
                        itemQuantity = itemDescriptions[i];
                        totalPrice = totalPrice + (int.Parse(itemQuantity) * int.Parse(itemPrice));
                        itemPrice = (int.Parse(itemQuantity) * int.Parse(itemPrice)).ToString();
                    }
                    else
                    {
                        if (itemCustomizations == "")
                        {
                            itemCustomizations = itemDescriptions[i];
                        }
                        else
                        {
                            itemCustomizations = itemCustomizations + "," + itemDescriptions[i];
                        }
                    }

                }
                MenuItem menuItemOrdered = new MenuItem(itemName, itemPrice, itemQuantity, itemCustomizations);
                orderedItems.Add(menuItemOrdered);

            }
            tax = taxPercentage * totalPrice;
            totalPrice = totalPrice + tax;

        }
        else
        {
            itemsOrdered = true;
            noitemsOrdered = !itemsOrdered;
        }
    }

}

@page "/Cart"
@inject NavigationManager NavigationManager
@inject NavigationManager UriHelper

<div class="page-title">
    <h1>Your Cart</h1>
</div>


<div class="container-center">

        @if (NavigationManager.Uri.Contains('@'))
        {
        

        String CartInfo = NavigationManager.Uri.Split("?")[1];
        String[] _items = CartInfo.Split("$");
        int x = 0;
        int id = 0;
        foreach (var _item in _items)
        {
            Console.WriteLine(_item);
            String[] itemDescriptions = _item.Split("@");
            

            <div class="cart-item">
                <button class="decrement" @onclick="() => decrement(0)">-</button>
                @if (id == 0)
                {
                    amount.Add(int.Parse(itemDescriptions[x + 2]));
                    <h4 class="fd-amt">@amount[id]</h4>
                } else {
                    <h4 class="fd-amt">@itemDescriptions[x+2]</h4>
                }
                <button class="increment" @onclick="() => increment(0)">+</button>
                <h4 class="fd-name">@itemDescriptions[x]</h4>
                <h3 class="fd-price">@("$" + itemDescriptions[x+1])</h3>
            </div>
            id = id + 1;
        }  
        
    }
</div>

<div class="place-order">
    
    <div style="inline-flex; align-items: center; justify-content: center;">
        <button onclick="@placeOrder">Place Order!</button>
        <div style="padding-top: 10px;color: darkred; text-align:center;" hidden="@cartErrorHidden">Cart is empty</div>
    </div>
    
</div>

@code {
    List<int> amount = new List<int>();

    public void increment(int id)
    {
        amount[id] = amount[id] + 1;
    }

    public void decrement(int id)
    {
        if (amount[id] != 1)
        {
            amount[id] = amount[id] - 1;
        }
    }

    bool cartErrorHidden = true;
    async Task placeOrder()
    {
       

        if (UriHelper.Uri.Contains('@'))
        {
            String[] temp = UriHelper.Uri.Split('?');
            UriHelper.NavigateTo("/?" + temp[temp.Length - 1], forceLoad: true);
        }
        else
        {
            cartErrorHidden = false;
            await Task.Delay(5000);
            cartErrorHidden = true;
        }
    }
}